---
# Copyright (c) IBM Corporation 2020, 2023

# tasks file for role sa_create_dynamic_resource

- name: "Set SA Service API URL"
  ansible.builtin.set_fact:
    sa_service_api: "{{ sa_service_protocol }}://{{ sa_service_hostname }}:{{ sa_service_port }}/ibm/sa/v1"

- name: "GET active template filtered by exact name"
  ansible.builtin.uri:
    url: "{{ sa_service_api }}/templates?templateName={{ templateName | urlencode }}&current=true"
    user: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    method: GET
    force_basic_auth: true
    status_code: 200
    timeout: "{{ sa_rest_api_timeout }}"
  delegate_to: localhost
  register: templates

- name: "Fail if template does not exist."
  ansible.builtin.fail:
    msg: "The given template '{{ templateName }}' does not exist."
  when: (templates.json._embedded is not defined)

- name: "Fail if template is not unique."
  ansible.builtin.fail:
    msg: "The given template '{{ templateName }}' is not unique it finds '{{ templates.json._embedded.templateList|length }}' templates."
  when: (templates.json._embedded.templateList|length != 1)

- name: "Create dynamic resource"
  ansible.builtin.uri:
    url: "{{ sa_service_api }}/resources"
    user: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    method: POST
    force_basic_auth: true
    status_code:
      - 201
      - 409
    body_format: json
    body:
      templateId: "{{ templates.json._embedded.templateList[0].id }}"
      subsystem: "{{ subsystem }}"
      system: "{{ system }}"
      job: "{{ job }}"
      procedure: "{{ procedure | default(omit) }}"
      comment: "{{ comment | default(omit) }}"
      group: "{{ group | default(omit) }}"
      sdesc: "{{ sdesc | default(omit) }}"
      path: "{{ path | default(omit) }}"
      filter: "{{ filter | default(omit) }}"
    timeout: "{{ sa_rest_api_timeout }}"
  delegate_to: localhost
  register: createres
  when: templates.json._embedded.templateList[0].id is defined

# previous request return either 201 and a location (registered in createres) --> OK continue
# or 409 and no location --> OK continue (but resume is skipped)
# or any other error --> previous task and any further task is failing
- name: "Resource already exists."
  ansible.builtin.debug:
    msg: "Resource already exists."
  when: (createres.location is undefined)

- name: "Resume the resource"
  ansible.builtin.uri:
    url: "{{ createres.location }}/resume"
    user: "{{ username }}"
    password: "{{ password }}"
    validate_certs: false
    method: POST
    force_basic_auth: true
    status_code: 202
    timeout: "{{ sa_rest_api_timeout }}"
  delegate_to: localhost
  register: resumeres
  when: createres.location is defined
...
